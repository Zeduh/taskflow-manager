services:
  postgres:
    container_name: postgres_db
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydatabase
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "4000:4000"
    develop:
      watch:
        - action: sync
          path: ./backend/src
          target: /app/src
          ignore:
            - node_modules/
            - dist/
        - action: sync
          path: ./backend/test
          target: /app/test
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
    volumes:
      - /app/node_modules
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_DATABASE: mydatabase
    command: npm run start:dev
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    develop:
      watch:
        - action: sync
          path: ./frontend/app
          target: /app/app
          ignore:
            - node_modules/
            - .next/
        - action: rebuild
          path: package.json
    volumes:
      - /app/node_modules
      - /app/.next
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://backend:4000
    depends_on:
      - backend
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge